// $ webppl mcmc_active.wppl --require webppl_gpio

var quiet_average = 3.5
var noisy_average = 5.5

var motion_active_average = 0.3
var motion_inactive_average = 0.05

var model = function(noise_sensor_data, motion_sensor_data){

	var room_is_active = flip(0.5) 
	
	//creation of the model
	var noise_mean = room_is_active ? noisy_average : quiet_average 
	var noise_model = Gaussian({mu: noise_mean, sigma: 2}) 

	var logProbsNoise = map(function(d) { return noise_model.score(d) },
		noise_sensor_data)

	factor(sum(logProbsNoise))

	var motion_prob = room_is_active3 ? motion_active_average : motion_inactive_average
	var motion_model = Bernoulli({p: motion_prob})

	var logProbsMotion = map(function(d) { return motion_model.score(d) },
		motion_sensor_data)

	factor(sum(logProbsMotion))

	return room_is_active
}

var setupData = function(input_data){
	var data_array = input_data.slice(3);

	var noise_sensor_data = data_array.slice(0, data_array.length/2)
	var motion_sensor_data_raw = data_array.slice(data_array.length/2)
	var motion_sensor_data = map(function(bool_string){
		return (bool_string == 'true') ? true : false
	}, motion_sensor_data_raw)

	return {
		noise_sensor_data: noise_sensor_data,
		motion_sensor_data: motion_sensor_data
	}
}

var data_arrays = setupData(process.argv)
var noise_sensor_data = data_arrays.noise_sensor_data
var motion_sensor_data = data_arrays.motion_sensor_data

var opts = {method: "MCMC", samples: 10000, burn: 5000, verbose: true}
Infer(opts, function() { model(noise_sensor_data, motion_sensor_data) } )
